Execution context                   


Everything in JavaScript happens in the Execution context.

There are two phases in the execution context. Firstly memory allocation is performed and then the code execution phase is done.

Memory Allocation                                           

The variables are declared and                                        
functions are also declared. But the functions are copied as they are and the variables are assigned undefined.


Code Execution

During code execution, the variables are assigned their original value. 
In other words, after the line of code is executed where a variable is assigned a value, only then the variable in the memory part gets assigned the same value. The functions create their own execution context.
                                                            



First of all, the global Execution context is created. Then when a function is going to be executed, then another execution context is created.
It all happens in the call stack.


Call stack:

|                                           |               
|                                           |
|                                           |
|                                           |
|                                           |
|                                           |
|                                           |
|                                           |
|                                           |
|___________________________________________|
|         Execution Context no.2            |
|___________________________________________|
|        Global Execution Context           |
|___________________________________________|

After the function is executed, its execution context vanishes like gets deleted and then the rest of the code is executed in the Global execution context.
And when all of the code is executed, the call stack goes empty.


Q - Why the variables are undefined and functions are not when used/called before declaration?
A - The variables and functions are defined and allocated memory before the execution of the code. The functions though, when accessed before their declaration, behave just as they do when accessed after their declaration. This is because in the memory the functions are there as it is and the variables are just assigned undefined. 
This is also known as hoisting.
Hoisting can also be defined as the process where variable and function declarations are moved to the top of their containing scope during the compilation phase before the code is executed. However, only the declarations are hoisted, not the initializations.
